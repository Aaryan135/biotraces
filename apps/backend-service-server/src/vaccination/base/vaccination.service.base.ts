/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Vaccination as PrismaVaccination } from "@prisma/client";

export class VaccinationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VaccinationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.vaccination.count(args);
  }

  async vaccinations(
    args: Prisma.VaccinationFindManyArgs
  ): Promise<PrismaVaccination[]> {
    return this.prisma.vaccination.findMany(args);
  }
  async vaccination(
    args: Prisma.VaccinationFindUniqueArgs
  ): Promise<PrismaVaccination | null> {
    return this.prisma.vaccination.findUnique(args);
  }
  async createVaccination(
    args: Prisma.VaccinationCreateArgs
  ): Promise<PrismaVaccination> {
    return this.prisma.vaccination.create(args);
  }
  async updateVaccination(
    args: Prisma.VaccinationUpdateArgs
  ): Promise<PrismaVaccination> {
    return this.prisma.vaccination.update(args);
  }
  async deleteVaccination(
    args: Prisma.VaccinationDeleteArgs
  ): Promise<PrismaVaccination> {
    return this.prisma.vaccination.delete(args);
  }
}
