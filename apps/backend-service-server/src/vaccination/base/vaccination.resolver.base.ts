/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Vaccination } from "./Vaccination";
import { VaccinationCountArgs } from "./VaccinationCountArgs";
import { VaccinationFindManyArgs } from "./VaccinationFindManyArgs";
import { VaccinationFindUniqueArgs } from "./VaccinationFindUniqueArgs";
import { DeleteVaccinationArgs } from "./DeleteVaccinationArgs";
import { VaccinationService } from "../vaccination.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Vaccination)
export class VaccinationResolverBase {
  constructor(
    protected readonly service: VaccinationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Vaccination",
    action: "read",
    possession: "any",
  })
  async _vaccinationsMeta(
    @graphql.Args() args: VaccinationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Vaccination])
  @nestAccessControl.UseRoles({
    resource: "Vaccination",
    action: "read",
    possession: "any",
  })
  async vaccinations(
    @graphql.Args() args: VaccinationFindManyArgs
  ): Promise<Vaccination[]> {
    return this.service.vaccinations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Vaccination, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Vaccination",
    action: "read",
    possession: "own",
  })
  async vaccination(
    @graphql.Args() args: VaccinationFindUniqueArgs
  ): Promise<Vaccination | null> {
    const result = await this.service.vaccination(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Vaccination)
  @nestAccessControl.UseRoles({
    resource: "Vaccination",
    action: "delete",
    possession: "any",
  })
  async deleteVaccination(
    @graphql.Args() args: DeleteVaccinationArgs
  ): Promise<Vaccination | null> {
    try {
      return await this.service.deleteVaccination(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
