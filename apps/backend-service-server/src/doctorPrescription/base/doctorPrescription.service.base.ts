/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DoctorPrescription as PrismaDoctorPrescription,
} from "@prisma/client";

export class DoctorPrescriptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DoctorPrescriptionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.doctorPrescription.count(args);
  }

  async doctorPrescriptions(
    args: Prisma.DoctorPrescriptionFindManyArgs
  ): Promise<PrismaDoctorPrescription[]> {
    return this.prisma.doctorPrescription.findMany(args);
  }
  async doctorPrescription(
    args: Prisma.DoctorPrescriptionFindUniqueArgs
  ): Promise<PrismaDoctorPrescription | null> {
    return this.prisma.doctorPrescription.findUnique(args);
  }
  async createDoctorPrescription(
    args: Prisma.DoctorPrescriptionCreateArgs
  ): Promise<PrismaDoctorPrescription> {
    return this.prisma.doctorPrescription.create(args);
  }
  async updateDoctorPrescription(
    args: Prisma.DoctorPrescriptionUpdateArgs
  ): Promise<PrismaDoctorPrescription> {
    return this.prisma.doctorPrescription.update(args);
  }
  async deleteDoctorPrescription(
    args: Prisma.DoctorPrescriptionDeleteArgs
  ): Promise<PrismaDoctorPrescription> {
    return this.prisma.doctorPrescription.delete(args);
  }
}
